{% set name = "ollama" %}
{% set goname = "github.com/jmorganca/ollama" %}
{% set version = "0.1.11" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  #url: https://{{ goname }}/archive/v{{ version }}.tar.gz
  #sha256: 881d81d6a113f5361fc1648ee3f07f596b96a25ff9c9e6b243c2386adb8a0b26
  git_url: https://github.com/jmorganca/ollama.git
  git_rev: v{{ version }}
  patches:
    # Use the same build options from llama.cpp-feedstock
    - 0001-darwin_amd64.patch  # [osx and x86_64]
    - 0001-darwin_arm64.patch  # [osx and arm64]

build:
  number: 2
  skip: True  # [win]
  string: cuda{{ cuda_compiler_version | replace('.', '') }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
  string: mps_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [osx and arm64]
  string: cpu_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [(osx and x86_64) or cuda_compiler_version == "None"]
  script:
    - export CMAKE_ARGS="${CMAKE_ARGS} -DCMAKE_EXE_LINKER_FLAGS="-static-libstdc++"  # [linux]
    - set CMAKE_ARGS="${CMAKE_ARGS} -DCMAKE_EXE_LINKER_FLAGS="-static-libstdc++"     # [win]
    - export GOFLAGS="'-ldflags=-X=github.com/jmorganca/ollama/version.Version={{ version }} -X=github.com/jmorganca/ollama/server.mode=release'"
    - go generate ./...
    - go install .                                                                                                            # [build_platform == target_platform]
    # TODO: This is due to a bug in our go-lang patch 
    #       Error message is go install can't write to GOBIN when cross compiling
    - unset CONDA_GO_COMPILER; GOPATH=$SRC_DIR/gopath go install .; mkdir -p $PREFIX/bin; cp gopath/bin/*/ollama $PREFIX/bin  # [build_platform != target_platform]
    - go-licenses save --save_path licenses ./...

  ignore_run_exports_from:
    # llama.cpp server is staticially linked
    - {{ compiler('cxx') }}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                    # [cuda_compiler_version not in (undefined, "None")]
    - {{ compiler('go') }} 1.20
    - go-licenses

    - git
    - cmake
    - make
    - cuda-cudart-dev                           # [(cuda_compiler_version or "").startswith("12")]
    - libcublas-dev                             # [(cuda_compiler_version or "").startswith("12")]
  run:
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version not in (undefined, "None")]

test:
  commands:
    - ollama --version
    - ollama --help

about:
  home: https://ollama.ai
  summary: Get up and running with Llama 2 and other large language models locally
  license: MIT
  license_family: MIT
  license_file:
    - LICENSE
    - licenses/
  dev_url: https://{{ goname }}

extra:
  recipe-maintainers:
    - sodre
